<!DOCTYPE html>
<html>
<head>
  <title>Video Chat with Chat</title>
</head>
<body>
  <h1>WebRTC Video Chat + Chat</h1>

  <input type="text" id="room" placeholder="Enter room code">
  <button id="createBtn">Create Room</button>
  <button id="joinBtn">Join Room</button>

  <br><br>

  <video id="localVideo" autoplay muted playsinline width="300"></video>
  <video id="remoteVideo" autoplay playsinline width="300"></video>

  <br><br>

  <button onclick="shareScreen()">Share Screen</button>
  <button onclick="stopScreenShare()">Stop Sharing</button>
  <button onclick="stopVideoCall()">Stop Video</button>
  <button onclick="resumeVideoCall()">Resume Video</button>

  <br><br>

  <div>
    <input type="text" id="chatInput" placeholder="Type a message">
    <button onclick="sendMessage()">Send</button>
  </div>

  <div id="chatBox" style="border: 1px solid black; width: 300px; height: 150px; overflow-y: scroll; margin-top: 10px;"></div>

  <script src="/socket.io/socket.io.js"></script>
  <script>
    const socket = io();
    let localStream;
    let peer;
    let screenTrack = null;

    async function startCamera() {
      try {
        localStream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
        document.getElementById('localVideo').srcObject = localStream;
      } catch (err) {
        console.error("Camera error:", err);
      }
    }

    startCamera();

    document.getElementById('createBtn').addEventListener('click', () => {
      socket.emit('create-room');
    });

    document.getElementById('joinBtn').addEventListener('click', () => {
      const code = document.getElementById('room').value;
      socket.emit('join-room', code);
    });

    socket.on('room-created', (code) => {
      document.getElementById('room').value = code;
      alert("Room created: " + code);
    });

    socket.on('room-joined', async (roomCode) => {
      if (!localStream) await startCamera();

      peer = createPeer();
      localStream.getTracks().forEach(track => peer.addTrack(track, localStream));

      const offer = await peer.createOffer();
      await peer.setLocalDescription(offer);
      socket.emit('offer', offer);
    });

    function createPeer() {
      const peer = new RTCPeerConnection({
        iceServers: [
          { urls: "stun:stun.l.google.com:19302" },
          {
            urls: "turn:openrelay.metered.ca:80",
            username: "openrelayproject",
            credential: "openrelayproject"
          }
        ]
      });

      peer.ontrack = (event) => {
        document.getElementById('remoteVideo').srcObject = event.streams[0];
      };

      peer.onicecandidate = (event) => {
        if (event.candidate) {
          socket.emit('ice-candidate', event.candidate);
        }
      };

      return peer;
    }

    socket.on('offer', async (offer) => {
      if (!localStream) await startCamera();

      peer = createPeer();
      await peer.setRemoteDescription(new RTCSessionDescription(offer));
      localStream.getTracks().forEach(track => peer.addTrack(track, localStream));

      const answer = await peer.createAnswer();
      await peer.setLocalDescription(answer);
      socket.emit('answer', answer);
    });

    socket.on('answer', async (answer) => {
      await peer.setRemoteDescription(new RTCSessionDescription(answer));
    });

    socket.on('ice-candidate', async (candidate) => {
      try {
        await peer.addIceCandidate(new RTCIceCandidate(candidate));
      } catch (err) {
        console.error("ICE error", err);
      }
    });

    function stopVideoCall() {
      if (localStream) {
        localStream.getVideoTracks().forEach(track => track.stop());
        document.getElementById('localVideo').srcObject = null;
        socket.emit('stop-video');
      }
    }

    socket.on('stop-video', () => {
      document.getElementById('remoteVideo').srcObject = null;
      console.log("Peer stopped video.");
    });

    async function shareScreen() {
      try {
        const screenStream = await navigator.mediaDevices.getDisplayMedia({ video: true, audio: true });
        screenTrack = screenStream.getVideoTracks()[0];
        document.getElementById('localVideo').srcObject = screenStream;

        const sender = peer.getSenders().find(s => s.track.kind === 'video');
        if (sender) sender.replaceTrack(screenTrack);

        screenTrack.onended = () => {
          const cameraTrack = localStream.getVideoTracks()[0];
          if (sender) sender.replaceTrack(cameraTrack);
          document.getElementById('localVideo').srcObject = localStream;
        };
      } catch (err) {
        alert("Screen sharing failed: " + err.message);
      }
    }

    function stopScreenShare() {
      if (screenTrack) {
        screenTrack.stop();
        const cameraTrack = localStream.getVideoTracks()[0];
        const sender = peer.getSenders().find(s => s.track.kind === 'video');
        if (sender) sender.replaceTrack(cameraTrack);
        document.getElementById('localVideo').srcObject = localStream;
        screenTrack = null;
      }
    }

    // Chat functions
    function sendMessage() {
      const msg = document.getElementById('chatInput').value;
      socket.emit('chat-message', msg);
      appendMessage("You: " + msg);
      document.getElementById('chatInput').value = '';
    }

    socket.on('chat-message', (msg) => {
      appendMessage("Peer: " + msg);
    });

    function appendMessage(message) {
      const chatBox = document.getElementById('chatBox');
      const msgDiv = document.createElement('div');
      msgDiv.innerText = message;
      chatBox.appendChild(msgDiv);
      chatBox.scrollTop = chatBox.scrollHeight;
    }
    async function resumeVideoCall() {
  try {
    // Reacquire camera
    const newStream = await navigator.mediaDevices.getUserMedia({ video: true, audio: false });
    const newVideoTrack = newStream.getVideoTracks()[0];

    // Replace the video track in the RTCPeerConnection
    const sender = peer.getSenders().find(s => s.track.kind === 'video');
    if (sender) {
      sender.replaceTrack(newVideoTrack);
    }

    // Set the new stream as local
    localStream = newStream;
    document.getElementById('localVideo').srcObject = localStream;

    console.log("✅ Video resumed");
  } catch (err) {
    console.error("❌ Failed to resume video:", err);
    alert("Couldn't access camera: " + err.message);
  }
}

  </script>
</body>
</html>
