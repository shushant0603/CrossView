<!DOCTYPE html>
<html>
<head>
  <title>Video Chat</title>
</head>
<body>
  <h1>WebRTC Video Chat</h1>

  <input type="text" id="room" placeholder="Enter room code">
  <button id="createBtn">Create Room</button>
  <button id="joinBtn">Join Room</button>

  <br><br>
  <video id="localVideo" autoplay muted playsinline width="300"></video>
  <video id="remoteVideo" autoplay playsinline width="300"></video>
  <br><br>
  <button onclick="shareScreen()">Share Screen</button>
<button onclick="stopScreenShare()">Stop Sharing</button>

  <script src="/socket.io/socket.io.js"></script>
  <script>
    const socket = io();
    let localStream;
    let peer;

    // Get Camera
    async function startCamera() {
      localStream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
      document.getElementById('localVideo').srcObject = localStream;
    }

    startCamera();

    document.getElementById('createBtn').addEventListener('click', () => {
      socket.emit('create-room');
    });

    document.getElementById('joinBtn').addEventListener('click', () => {
      const code = document.getElementById('room').value;
      socket.emit('join-room', code);
    });

    socket.on('room-created', (code) => {
      document.getElementById('room').value = code;
      alert("Room created: " + code);
    });
    socket.on('room-joined', async (roomCode) => {
  if (!localStream) {
    try {
      localStream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
      document.getElementById('localVideo').srcObject = localStream;
    } catch (err) {
      console.error("⚠️ Error accessing media devices:", err);
      return;
    }
  }

  peer = createPeer();
  localStream.getTracks().forEach(track => peer.addTrack(track, localStream));

  const offer = await peer.createOffer();
  await peer.setLocalDescription(offer);
  socket.emit('offer', offer);
});


function createPeer() {
  const peer = new RTCPeerConnection({
    iceServers: [
      {
        urls: "stun:stun.l.google.com:19302"
      }
    ]
  });


      peer.ontrack = (event) => {
        document.getElementById('remoteVideo').srcObject = event.streams[0];
      };

      peer.onicecandidate = (event) => {
        if (event.candidate) {
          socket.emit('ice-candidate', event.candidate);
        }
      };

      return peer;
    }

    socket.on('offer', async (offer) => {
      peer = createPeer();
      await peer.setRemoteDescription(new RTCSessionDescription(offer));
      localStream.getTracks().forEach(track => peer.addTrack(track, localStream));

      const answer = await peer.createAnswer();
      await peer.setLocalDescription(answer);
      socket.emit('answer', answer);
    });

    socket.on('answer', async (answer) => {
      await peer.setRemoteDescription(new RTCSessionDescription(answer));
    });

    socket.on('ice-candidate', async (candidate) => {
      try {
        await peer.addIceCandidate(new RTCIceCandidate(candidate));
      } catch (err) {
        console.error("ICE error", err);
      }
    });
    let screenTrack = null;

// Share Screen Function
async function shareScreen() {
  try {
    const screenStream = await navigator.mediaDevices.getDisplayMedia({
      video: true,
      audio: true, // ✅ This enables system audio (if supported)
    });

    // Replace local video stream with screen stream
    const videoElement = document.getElementById('localVideo');
    videoElement.srcObject = screenStream;

    // Send tracks to peer
    screenStream.getTracks().forEach(track => {
      const sender = peer.getSenders().find(s => s.track.kind === track.kind);
      if (sender) {
        sender.replaceTrack(track); // Swap old track with screen track
      }
    });

    // When screen sharing is stopped by user
    screenStream.getVideoTracks()[0].addEventListener('ended', () => {
      // Revert to camera stream
      localStream.getTracks().forEach(track => {
        const sender = peer.getSenders().find(s => s.track.kind === track.kind);
        if (sender) {
          sender.replaceTrack(track);
        }
      });

      videoElement.srcObject = localStream;
    });

  } catch (err) {
    console.error("❌ Failed to share screen with audio:", err);
    alert("Screen share failed: " + err.message);
  }
}


// Stop Screen Sharing
function stopScreenShare() {
  const sender = peer.getSenders().find(s => s.track.kind === 'video');
  if (sender && localStream) {
    const cameraTrack = localStream.getVideoTracks()[0];
    sender.replaceTrack(cameraTrack);
    document.getElementById('localVideo').srcObject = localStream;
    console.log("🛑 Screen sharing stopped");
  }

  if (screenTrack) {
    screenTrack.stop();
    screenTrack = null;
  }
}

  </script>
</body>
</html>
